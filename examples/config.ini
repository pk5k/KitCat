# INPUT-RULE / regex
# 	Files relative to the given working-directory (-input argument) will be checked against this regular-expression.
# 	Each {capture_group} will be replaced with it's regex fragment out of the groups-section below.
#	Don't add the regex of the capturing-groups directly to this string; always define them via the groups-section.

input = "{group}/{sample} ?{kit}{variation}?\.{extension}"

# OUTPUT-PATH / regular string
# 	Each file that matched the input-rule will be linked/copied to the output-path.
# 	The capture-groups used inside the output-path must be defined inside the input-rule.
# 	The output-directory (-ouput argument) will be prefixed to the resulting output-path.

output = "{kit}/{sample} {variation}.{extension}"

# RECHECK-RULE / regex
# 	Each value of the group-names defined in the rearrange-section below will be checked against this regular-expression
# 	after all group-values of this file have been read.
# 	If the group-value matches, the value of the given rearrange-group-key will be used as new value for the file.
# 	It is possible to use capture-groups in the rearrange-value.

recheck = "^([[0-9a-zA-Z]{1,2}])$"

# INDEX-GROUP / group-name defined in groups-section
# 	All files with the same index-group-value will be treated as one collection/kit

index = kit

[groups]
# Group-names defined here can be used inside the input-rule, output-path and rearranges.
# Group-names are case-sensitive and must be surrounded with curly-brackets when refered -> "{groupname}".
# How group-names are resolved:
# - input-rule: the group-name is replaced by the regular-expression defined here.
# - output-path: the group-name is replaced by it's final value, determined after processing the input-rule & all rearranges.
# - rearranges: the group-name is replaced by it's value, determined after processing the input-rule and all previous executed rearranges for this group-name.

group = "([a-zA-Z0-9 ]*)"
sample = "([a-zA-Z0-9]*)"
kit = "([a-zA-Z0-9]*)"
variation = "([a-zA-Z0-9 ]*)"
extension = "([(wav|WAV|mp3|MP3)]*)"

[rearrange]
# Read the description of the RECHECK-RULE above.
# The current value of a group (the value that matched on the recheck-rule) can be used inside the string, which will be used as it's replacement.

kit = "{sample} - {group}/{kit}_"